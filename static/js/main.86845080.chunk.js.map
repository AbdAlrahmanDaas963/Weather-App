{"version":3,"sources":["components/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","lat","setLat","long","setLong","data","setData","useEffect","navigator","console","log","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","timeout","url","a","axios","get","respone","getData","main","name","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAsEeA,MAlEf,WAAoB,IAAD,EACOC,mBAAS,IADhB,mBACRC,EADQ,KACHC,EADG,OAESF,mBAAS,IAFlB,mBAERG,EAFQ,KAEFC,EAFE,OAGSJ,mBAAS,IAHlB,mBAGRK,EAHQ,KAGFC,EAHE,KAoDf,OA/CAC,qBAAW,WAEH,gBAAiBC,UAEjBC,QAAQC,IAAI,cAEZD,QAAQC,IAAI,8BAWhBF,UAAUG,YAAYC,oBARL,SAACC,GACdJ,QAAQC,IAAI,SAAUG,GACtBX,EAAOW,EAASC,OAAOC,UACvBX,EAAQS,EAASC,OAAOE,cAEV,SAACC,GACfR,QAAQC,IAAI,kBAAkBO,KAE4B,CAC1DC,QAAS,MAGbT,QAAQC,IAAI,OAAOT,GACnBQ,QAAQC,IAAI,QAAQP,GAGpB,IACMgB,EAAG,+DAA2DlB,EAA3D,gBAAsEE,EAAtE,yDAEI,uCAAG,4BAAAiB,EAAA,+EAIcC,IAAMC,IAAIH,GAJxB,OAIFI,EAJE,OAKRd,QAAQC,IAAI,QAAQa,EAAQlB,MAC5BC,EAAQiB,EAAQlB,MANR,gDAQRI,QAAQC,IAAI,aAAZ,MARQ,yDAAH,qDAabc,KAGD,CAACvB,EAAKE,IAIL,wDAG2B,qBAAdE,EAAKoB,KAEN,2CAAcpB,EAAKqB,QAEnB,iDCtDLC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86845080.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./common/Card\";\r\n\r\nfunction Weather() {\r\n    const [lat, setLat] = useState([]);\r\n    const [long, setLong] = useState([]);\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect( () => {\r\n        \r\n        if (\"geolocation\" in navigator){ //check Geolocation available \r\n            //things to do\r\n            console.log(\"available!\")\r\n        }else{\r\n            console.log(\"Geolocation not available!\");\r\n        }\r\n\r\n        const succCall = (position) => {\r\n            console.log('done :', position)\r\n            setLat(position.coords.latitude)\r\n            setLong(position.coords.longitude)\r\n        }\r\n        const errorCall = (error) => {\r\n            console.log('calling error :',error)\r\n        }\r\n        navigator.geolocation.getCurrentPosition(succCall, errorCall, {\r\n            timeout: 30000\r\n        });\r\n\r\n        console.log('lat ',lat)\r\n        console.log('long ',long)\r\n\r\n        \r\n        const url3 = 'https://api.openweathermap.org/data/2.5/weather/?lat=34.8021&lon=38.9968&units=metric&APPID=15381c50cf1f9331c933a24675c1c91e'\r\n        const url = `https://api.openweathermap.org/data/2.5/weather/?lat=${lat}&lon=${long}&units=metric&APPID=15381c50cf1f9331c933a24675c1c91e`\r\n        \r\n        const getData = async () => {\r\n            \r\n            // console.log(typeof data.main !== 'undefined')\r\n            try{\r\n                const respone = await axios.get(url)\r\n                console.log('eile ',respone.data)\r\n                setData(respone.data)\r\n            } catch(error){\r\n                console.log('eeeeeeeeee',error)\r\n            }\r\n        }\r\n        \r\n        \r\n        getData()\r\n        \r\n\r\n    }, [lat, long]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            Weather-application 2\r\n            \r\n            {(typeof data.main !== 'undefined') ? (\r\n                    // <Card weatherData={data}/>\r\n                    <div>City: - {data.name}</div>\r\n                ): (\r\n                    <h1>Loading ...</h1>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n\r\n// done without chrome","import Weather from \"./components/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}